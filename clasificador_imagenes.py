# -*- coding: utf-8 -*-
"""clasificador-imagenes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1taXdNgmB8qQsow6D0YmKJktUtHpk0SF7
"""

import tensorflow as tf
from tensorflow import keras 

import numpy as np 
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist
(train_images, train_labels), (test_images, test_labels) =  fashion_mnist.load_data()

class_names = ['T-shirt/top','Trouser','Pullover','Dress','Coat','Sandal','Skirt','Sneaker','Bag','Ankle boot']

#Dividimos los datos por el maximo valor que pueden tomar los pixeles (255.0) para normalizarlos
train_images = train_images / 255.0 
test_images = test_images / 255.0

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(train_images[i], cmap= plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])

print(train_images.shape)

#Seteamos el input_shape a la dimension de las imagenes (28x28)
#Primera capa de redes neuronales con 128 neuronas que usan la funcion de activacion ReLU
#Segunda capa de redes neuronales con 10 neuronas que usan la funcion de activacion Softmax
model = keras.Sequential([keras.layers.Flatten(input_shape = (28,28)), keras.layers.Dense(128, activation= tf.nn.relu), keras.layers.Dense(10, activation= tf.nn.softmax)])

model.compile(optimizer = tf.train.AdamOptimizer(), loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

model.fit(train_images,train_labels, epochs = 5)
#Evaluamos la precision y el loss del modelo conforme aumentamos los epochs

test_loss, test_acc = model.evaluate(test_images, test_labels)

predictions = model.predict(test_images)

plt.figure(figsize=(15,15))
plt.subplots_adjust(hspace = 0.5)
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid()
    plt.imshow(test_images[i], cmap= plt.cm.binary)
    predicted_label = np.argmax(predictions[i])
    true_label = test_labels[i]
    if predicted_label == true_label:
        label_color = 'green'
    else: 
        label_color = 'red'
    plt.xlabel(('Etiqueta predecida: {}\n***********************\nEtiqueta real: {}').format(class_names[predicted_label], class_names[true_label]), color = label_color)

